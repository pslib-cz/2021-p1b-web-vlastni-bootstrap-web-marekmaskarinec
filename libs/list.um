// list.um - doubly-linked list for umka
// example:
// l := list.List{}
// l.push_front(2)
// l.push_back(4)
// l.insert_after(l.front, 3)
// l.push_front(1)
// printf("%s\n", l.to_str())
//
// will result in: { 1 2 3 4 }

type Any* = interface{
}

type Node* = struct {
		value: Any
		next: ^Node
		prev: weak ^Node // cast to ^Node before using
}

type List* = struct {
	front: ^Node
	back: ^Node
	length: int
}

// push value before the first element
fn (l: ^List) push_front*(value: Any) {
	n := new(Node)
	
	n.value = value
	n.next = l.front

	l.front = n
	if l.length == 0 {
		l.back = l.front
	}
	l.length++
}

// add value to the end of the list
fn (l: ^List) push_back*(value: Any) {
	n := new(Node)

	n.value = value
	n.prev = l.back

	if l.back != null {
		l.back.next = n
	}

	l.back = n
	if l.front == null {
		l.front = n
	}

	l.length++
}

// insert value after a
fn (l: ^List) insert_after*(a: ^Node, value: Any) {
	n := new(Node)

	n.value = value

	n.prev = a
	n.next = a.next
	a.next.prev = n

	a.next = n

	if l.back == a {
		l.back = n
	}
	l.length++
}

// creates a list from array s
fn from_arr*(s: []Any): List {
	l := List{}
	l.length = len(s)

	c := new(Node)
	l.front = c
	for i, v in s {
		if i == len(s) {
			l.back = c.prev
			l.back.next = null
		}

		c.value = v
		c.next = new(Node)
		c.next.prev = c
		c = c.next
	}

	return l
}

// converts a list l to array
fn (l: ^List) to_arr(): []Any {
	a := make([]Any, l.length)

	i:=0;
	for n:=l.front; n != null; n=n.next {
		a[i] = n.value
		i++
	}

	return a
}

// remove n from the list
fn (l: ^List) remove*(n: ^Node) {
	l.length--

	if n == l.front {
		l.front = n.next
		return
	}

	if n == l.back {
		l.back = n.prev
	}

	^Node(n.prev).next = n.next
}

fn (l: ^List) to_str*(): str {
	out := "{ "
	for n:=l.front; n != null; n = n.next {
		out += repr(n.value)
	}
	out += "}"

	return out
}
