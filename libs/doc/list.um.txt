list.um
________________________________________________________________________________
 list.um - doubly-linked list for umka
 example:
 l := list.List{}
 l.push_front(2)
 l.push_back(4)
 l.insert_after(l.front, 3)
 l.push_front(1)
 printf("%s\n", l.to_str())
________________________________________________________________________________

struct Any*
________________________________________________________________________________

type Any* = interface{
}



________________________________________________________________________________

struct Node*
________________________________________________________________________________

type Node* = struct {
		value: Any
		next: ^Node
		prev: weak ^Node // cast to ^Node before using
}



________________________________________________________________________________

struct List*
________________________________________________________________________________

type List* = struct {
	front: ^Node
	back: ^Node
	length: int
}



________________________________________________________________________________

push_front*
________________________________________________________________________________

fn (l: ^List) push_front*(value: Any)

push value before the first element

________________________________________________________________________________

push_back*
________________________________________________________________________________

fn (l: ^List) push_back*(value: Any)

add value to the end of the list

________________________________________________________________________________

insert_after*
________________________________________________________________________________

fn (l: ^List) insert_after*(a: ^Node, value: Any)

insert value after a

________________________________________________________________________________

from_arr*
________________________________________________________________________________

fn from_arr*(s: []Any): List

creates a list from array s

________________________________________________________________________________

remove*
________________________________________________________________________________

fn (l: ^List) remove*(n: ^Node)

remove n from the list

________________________________________________________________________________

to_str*
________________________________________________________________________________

fn (l: ^List) to_str*(): str


________________________________________________________________________________


