strings.um
________________________________________________________________________________

                                                                  
 strings.um - public domain string manipulation library for umka  
 by Marek Maskarinec                                              
 https:github.commarekmaskarineclibs                          
                                                                  
 How to use:                                                      
   just import this.                                              
                                                                  
 TODO:                                                            
  - increase performance                                          
                                                                  

________________________________________________________________________________

struct builder*
________________________________________________________________________________

type builder* = struct {
	len: int
	buf: []char
}


builder allows for faster string addition.

________________________________________________________________________________

mk_builder*
________________________________________________________________________________

fn mk_builder*(): builder

creates an allocated builder

________________________________________________________________________________

write_str*
________________________________________________________________________________

fn (b: ^builder) write_str*(inp: str)

writes a string to a builder

________________________________________________________________________________

write_char*
________________________________________________________________________________

fn (b: ^builder) write_char*(inp: char)

writes a char to the builder

________________________________________________________________________________

to_str*
________________________________________________________________________________

fn (b: ^builder) to_str*(): str

returns the content of a builder as a string

________________________________________________________________________________

sslice*
________________________________________________________________________________

fn sslice*(inp: str, start, end: int): str

same as standard slice, but usable with string. the numbers are inclusive

________________________________________________________________________________

contains*
________________________________________________________________________________

fn contains*(inp, check: str): bool

returns true, if string is contained in another string

________________________________________________________________________________

join*
________________________________________________________________________________

fn join*(inp: []str, joiner: str): str

joins an array of string into one and adds a joiner between them

________________________________________________________________________________

replace*
________________________________________________________________________________

fn replace*(inp, pattern, replacer: str): str

replaces an pattern with a string

________________________________________________________________________________

split*
________________________________________________________________________________

fn split*(inp: str, splitter: str): []str

splits a string, every time a pattern occurs. it deletes it (equivalent to replace(s, pattern, ""))

________________________________________________________________________________

toupper*
________________________________________________________________________________

fn toupper*(inp: str): str

returns the same string, but characters are upper case

________________________________________________________________________________

tolower*
________________________________________________________________________________

fn tolower*(inp: str): str

returns the same string, but all characters are lower case

________________________________________________________________________________

repeat*
________________________________________________________________________________

fn repeat*(inp: str, count: int): str

repeats string count number of times

________________________________________________________________________________

trimspaces*
________________________________________________________________________________

fn trimspaces*(inp: str): str

trims whitespaces from the start and end of a string

________________________________________________________________________________

trimprefix*
________________________________________________________________________________

fn trimprefix*(inp: str, prefix: str): str

trims a prefix of a string

________________________________________________________________________________

trimsuffix*
________________________________________________________________________________

fn trimsuffix*(inp: str, suffix: str): str

trims a suffix of a string

________________________________________________________________________________


